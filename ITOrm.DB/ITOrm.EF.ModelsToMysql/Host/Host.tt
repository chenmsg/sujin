<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="MY_SQL_MultipleOutputHelper.ttinclude" #>
<#  
// 初始化
var manager = Manager.Create(Host, GenerationEnvironment);  
foreach(DbTable dbtable in DbHelper.GetDbTables(config.ConnectionString,config.DbDatabase))//循环数据库表
{//循环数据表开始
#>

<# 
manager.StartNewFile(dbtable.EntityName+".cs");//定义输出文件名称
#>
<# 
//开始--------------------------------------------------------------------------------------------
#>
//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的...
//    生成时间 <#=string.Format("{0:yyyy-MM-dd HH:mm:ss}",DateTime.Now)#> By CClump
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Entity.Infrastructure;
using ITOrm.Ms.Models.Context;
using ITOrm.Ms.Models.Helper;
using ITOrm.Ms.Models.Specification;
namespace ITOrm.Ms.Models.Host
{
    /// <summary>
    /// <#=dbtable.TableType=="BASE TABLE" ? "表":"视图"#>: <#=dbtable.TableComment#>
    /// </summary>
    [Serializable]
    public class <#=dbtable.EntityName#> : Base<#=dbtable.TableType=="BASE TABLE" ? "Entity":"View"#>Action<<#=dbtable.EntityName#>>
    {
        #region Entity Field
        <# foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, dbtable.TableName)){#>
        <#if(column.IsPrimaryKey){#>

        /// <summary>
        /// <#=column.Remark#>
        /// </summary>
        [Key]
        public <#= column.CSharpType#> <#=column.ColumnName#> { get; set; }<#}else  if(column.CSharpType=="string" &&  column.CharLength>0){#>
        
        /// <summary>
        /// <#=column.Remark#>
        /// </summary>
        [StringLength(<#=column.CharLength#>)]
        public <#= column.CSharpType#> <#=column.ColumnName#> { get; set; }<#}else if(column.CSharpType=="DateTime"){#>

        private <#= column.CSharpType#> _<#=column.ColumnName#>;
        ///<summary>
        ///<#=column.Remark#>
        ///</summary>
        public <#= column.CSharpType#> <#=column.ColumnName#>
        {
            get
            {
                if (_<#=column.ColumnName#> != null)
                {
                    if (_<#=column.ColumnName#> == Convert.ToDateTime("0001/1/1 0:00:00"))
                        _<#=column.ColumnName#> = DateTime.Now;
                }
                else
                {
                    _<#=column.ColumnName#> = DateTime.Now;
                }
                return _<#=column.ColumnName#>;
            }
            set
            {
                if (value != null)
                {
                    if (value == Convert.ToDateTime("0001/1/1 0:00:00"))
                        value = DateTime.Now;
                }
                else
                {
                    value = DateTime.Now;
                }
                _<#=column.ColumnName#> = value;
            }
        }<#}else if(column.CSharpType=="bool"){#>
        
        /// <summary>
        /// <#=column.Remark#>
        /// </summary>
        public <#= column.CSharpType#> <#=column.ColumnName#> { get; set; }

		  <# }else{#>

        /// <summary>
        /// <#=column.Remark#>
        /// </summary>
        public <#= column.CSharpType#><#=dbtable.TableType=="BASE TABLE" ? "":"?"#> <#=column.ColumnName#> { get; set; }
        <#}#>

        <#}#>
#endregion

        #region Data

        /// <summary>
        /// 数据库名称
        /// </summary>
        public override string DataName { get { return "<#=config.DbDatabase#>"; } }

        /// <summary>
        /// 表名称
        /// </summary>
        public override string DataTableName { get { return "<#=dbtable.TableName#>"; } }

        #endregion

        #region Hyperemia
        public override <#=dbtable.TableType=="BASE TABLE" ? "BaseEntity":"BaseView"#> Clone()
        {
            return this as <#=dbtable.TableType=="BASE TABLE" ? "BaseEntity":"BaseView"#>;
        }
        #endregion

        #region ==========查询单一实体

        /// <summary>
        /// 根据lamda表达式获取单一实体,如果没有找到则返回null
        /// </summary>
        /// <param name="specification">满足表达式规范的组合</param>
        /// <returns><#=dbtable.EntityName#>实体对象</returns>
        public static <#=dbtable.EntityName#> Single(ISpecification<<#=dbtable.EntityName#>> specification)
        {
            <#=dbtable.EntityName#> entity = new <#=dbtable.EntityName#>();
            if (specification != null)
            {
                try
                {
                    using (<#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>> db = new <#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>>())
                    {
                        entity = db.BaseDbSet.FirstOrDefault(specification.Predicate);
					}
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return entity;
        }

        /// <summary>
        /// 根据lamda表达式获取单一实体,如果没有找到则返回null
        /// </summary>
        /// <param name="predicate">表达式</param>
        /// <returns><#=dbtable.EntityName#>实体对象</returns>
        public static <#=dbtable.EntityName#> Single(Expression<Func<<#=dbtable.EntityName#>, bool>> predicate)
        {
            <#=dbtable.EntityName#> entity = new <#=dbtable.EntityName#>();
            if (predicate != null)
            {
                try
                {
                    using (<#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>> db = new <#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>>())
                    {
                        entity = db.BaseDbSet.FirstOrDefault(predicate);
					}
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return entity;
        }

        /// <summary>
        /// 根据主键ID取得单一实体,如果没有找到则返回null
        /// </summary>
        /// <param name="id">实体的主键ID</param>
        /// <returns><#=dbtable.EntityName#>实体对象</returns>
        public static <#=dbtable.EntityName#> Single(int id)
        {
            <#=dbtable.EntityName#> entity = new <#=dbtable.EntityName#>();
            if (id > 0)
            {
                try
                {
                    using (<#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>> db = new <#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>>())
                    {
                        <#foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, dbtable.TableName)){if(column.IsPrimaryKey){#>entity = db.BaseDbSet.FirstOrDefault(o => o.<#=column.ColumnName#> == id);<#}}#>
					}
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return entity;
        }

        #endregion

        #region ==========查询数据

        /// <summary>
        /// 获取条数
        /// </summary>
        /// <param name="predicate">表达式</param>
        /// <returns></returns>
        public static int GetCount(Expression<Func<<#=dbtable.EntityName#>, bool>> predicate)
        {
            int count = 0;
            if (predicate != null)
            {
                try
                {
                   using (<#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>> db = new <#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>>())
                    {
                        count = db.BaseDbSet.Where(predicate).Count();
                    }
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return count;
        }


		/// <summary>
        /// 获取条数
        /// </summary>
        /// <param name="predicate">表达式</param>
        /// <returns></returns>
        public static int GetCount(ISpecification<<#=dbtable.EntityName#>> spec)
        {
            int count = 0;
            if (spec != null)
            {
                try
                {
                   using (<#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>> db = new <#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>>())
                    {
                        count = db.BaseDbSet.Where(spec.Predicate).Count();
                    }
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return count;
        }


        /// <summary>
        /// 获取该实体的查询
        /// </summary>
        /// <param name="predicate">表达式</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetQuery(Expression<Func<<#=dbtable.EntityName#>, bool>> predicate)
        {
            return GetQuery(0, predicate, null);
        }

        public static List<<#=dbtable.EntityName#>> GetQuery(Expression<Func<<#=dbtable.EntityName#>, bool>> predicate, Func<<#=dbtable.EntityName#>, object> sortBy, bool desc = true)
        {
            return GetQuery(0, predicate, sortBy, desc);
        }

        /// <summary>
        /// 获取该实体的查询
        /// </summary>
        /// <param name="top">查询前几条，top小于等于0则展示全部</param>
        /// <param name="predicate">表达式</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetQuery(int top, Expression<Func<<#=dbtable.EntityName#>, bool>> predicate)
        {
            return GetQuery(top, predicate, null);
        }

        /// <summary>
        /// 获取该实体的查询,单排序
        /// </summary>
        /// <param name="top">查询前几条，top小于等于0则展示全部</param>
        /// <param name="predicate">表达式</param>
        /// <param name="sortBy">排序字段</param>
        /// <param name="desc">默认True为降序,False升序</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetQuery(int top, Expression<Func<<#=dbtable.EntityName#>, bool>> predicate, Func<<#=dbtable.EntityName#>, object> sortBy, bool desc = true)
        {
            List<<#=dbtable.EntityName#>> list = null;
            if (predicate != null)
            {
                try
                {
                    using (<#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>> db = new <#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>>())
                    {
                        IQueryable<<#=dbtable.EntityName#>> query = db.BaseDbSet.Where(predicate);//默认排序
                        if (top <= 0 && sortBy == null)//直接返回结果，防止不必要的操作
                        {
                            return query.ToList();
                        }
                        IOrderedEnumerable<<#=dbtable.EntityName#>> queryOrder = null;
                        if (sortBy != null)//执行排序
                        {
                            if (desc)
                            {
                                queryOrder = query.OrderByDescending(sortBy);
                            }
                            else
                            {
                                queryOrder = query.OrderBy(sortBy);
                            }
                        }

                        if (queryOrder != null)
                        {
                            if (top > 0)//top<=0则展示全部
                            {
                                list = queryOrder.Take(top).ToList();
                            }
                            else
                            {
                                list = queryOrder.ToList();
                            }
                        }
                        else
                        {
                            if (top > 0)//top<=0则展示全部
                            {
                                list = query.Take(top).ToList();
                            }
                            else
                            {
                                list = query.ToList();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return list;
        }

        /// <summary>
        /// 获取该实体的查询,多排序
        /// </summary>
        /// <param name="predicate">表达式</param>
        /// <param name="sortDic">字典存放多个排序字段，Key = 默认True为降序,False升序</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetQuery(Expression<Func<<#=dbtable.EntityName#>, bool>> predicate, Dictionary<Func<<#=dbtable.EntityName#>, object>,bool> sortDic)
        {
            return GetQuery(0, predicate, sortDic);
        }

        /// <summary>
        /// 获取该实体的查询,多排序
        /// </summary>
        /// <param name="top">查询前几条，top小于等于0则展示全部</param>
        /// <param name="predicate">表达式</param>
        /// <param name="sortDic">字典存放多个排序字段，Key = 默认True为降序,False升序</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetQuery(int top, Expression<Func<<#=dbtable.EntityName#>, bool>> predicate, Dictionary<Func<<#=dbtable.EntityName#>, object>,bool> sortDic)
        {
            List<<#=dbtable.EntityName#>> list = null;
            if (predicate != null)
            {
                try
                {
                    using (<#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>> db = new <#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>>())
                    {
                        if (sortDic != null && sortDic.Count > 0)//根据字典内的排序执行
                        {
                            IQueryable<<#=dbtable.EntityName#>> query = db.BaseDbSet.Where(predicate);
                            IOrderedEnumerable<<#=dbtable.EntityName#>> queryOrder = null;
                            int num = 0;
                            foreach (KeyValuePair<Func<<#=dbtable.EntityName#>, object>,bool> kvp in sortDic)
                            {
                                if (num == 0)//第一个
                                {
                                    if (kvp.Value)//True为降序
                                    {
                                        queryOrder = query.OrderByDescending(kvp.Key);
                                    }
                                    else
                                    {
                                        queryOrder = query.OrderBy(kvp.Key);
                                    }
                                }
                                else
                                {
                                    if (kvp.Value)//True为降序
                                    {
                                        queryOrder = queryOrder.ThenByDescending(kvp.Key);
                                    }
                                    else
                                    {
                                        queryOrder = queryOrder.ThenBy(kvp.Key);
                                    }
                                }
                                num++;
                            }
                            if (queryOrder != null)
                            {
                                if (top > 0)//top<=0则展示全部
                                {
                                    list = queryOrder.Take(top).ToList();
                                }
                                else
                                {
                                    list = queryOrder.ToList();
                                }
                            }
                            else
                            {
                                if (top > 0)//top<=0则展示全部
                                {
                                    list = query.Take(top).ToList();
                                }
                                else
                                {
                                    list = query.ToList();
                                }
                            }
                        }
                        else//默认排序 
                        {
                            if (top > 0)//top<=0则展示全部
                            {
                                list = db.BaseDbSet.Where(predicate).Take(top).ToList();
                            }
                            else
                            {
                                list = db.BaseDbSet.Where(predicate).ToList();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return list;
        }

        /// <summary>
        /// 获取该实体的查询
        /// </summary>
        /// <param name="specification">满足表达式规范的组合</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetQuery(ISpecification<<#=dbtable.EntityName#>> specification)
        {
            return GetQuery(0, specification.Predicate);
        }

        /// <summary>
        /// 获取该实体的查询
        /// </summary>
        /// <param name="top">查询前几条，top小于等于0则展示全部</param>
        /// <param name="specification">满足表达式规范的组合</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetQuery(int top, ISpecification<<#=dbtable.EntityName#>> specification)
        {
            return GetQuery(top, specification.Predicate);
        }

        /// <summary>
        /// 获取该实体的查询,单排序
        /// </summary>
        /// <param name="specification">满足表达式规范的组合</param>
        /// <param name="sortBy">排序字段</param>
        /// <param name="desc">默认True为降序,False升序</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetQuery(ISpecification<<#=dbtable.EntityName#>> specification, Func<<#=dbtable.EntityName#>, object> sortBy, bool desc = true)
        {
            return GetQuery(0, specification.Predicate, sortBy, desc);
        }

        /// <summary>
        /// 获取该实体的查询,单排序
        /// </summary>
        /// <param name="top">查询前几条，top小于等于0则展示全部</param>
        /// <param name="specification">满足表达式规范的组合</param>
        /// <param name="sortBy">排序字段</param>
        /// <param name="desc">默认True为降序,False升序</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetQuery(int top, ISpecification<<#=dbtable.EntityName#>> specification, Func<<#=dbtable.EntityName#>, object> sortBy, bool desc = true)
        {
            return GetQuery(top, specification.Predicate, sortBy, desc);
        }

        /// <summary>
        /// 获取该实体的查询,多排序
        /// </summary>
        /// <param name="specification">满足表达式规范的组合</param>
        /// <param name="sortDic">字典存放多个排序字段，Key = 默认True为降序,False升序</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetQuery(ISpecification<<#=dbtable.EntityName#>> specification, Dictionary<Func<<#=dbtable.EntityName#>, object>,bool> sortDic)
        {
            return GetQuery(0, specification.Predicate, sortDic);
        }

        /// <summary>
        /// 获取该实体的查询,多排序
        /// </summary>
        /// <param name="top">查询前几条，top小于等于0则展示全部</param>
        /// <param name="specification">满足表达式规范的组合</param>
        /// <param name="sortDic">字典存放多个排序字段，Key = 默认True为降序,False升序</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetQuery(int top, ISpecification<<#=dbtable.EntityName#>> specification, Dictionary<Func<<#=dbtable.EntityName#>, object>,bool> sortDic)
        {
            return GetQuery(top, specification.Predicate, sortDic);
        }

        #endregion

        #region ==========分页查询数据

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="predicate">Linq表达式[条件查询]</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetPaged(Expression<Func<<#=dbtable.EntityName#>, bool>> predicate, int pageIndex, int pageSize)
        {
            return GetPaged(predicate, pageIndex, pageSize, null);
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="predicate">Linq表达式[条件查询]</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <param name="sortBy">Linq表达式[排序字段]</param>
        /// <param name="desc">默认True为降序,False升序</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetPaged(Expression<Func<<#=dbtable.EntityName#>, bool>> predicate, int pageIndex, int pageSize, Func<<#=dbtable.EntityName#>, object> sortBy, bool desc = true)
        {
            List<<#=dbtable.EntityName#>> list = null;
            int totalCount = 0;
            if (predicate != null)
            {
                try
                {
                    using (<#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>> db = new <#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>>())
                    {
                        IQueryable<<#=dbtable.EntityName#>> query = db.BaseDbSet.Where(predicate);//默认排序
                        if (sortBy != null)//执行排序
                        {
                            if (desc)
                            {
                                list = query.OrderByDescending(sortBy).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                            }
                            else
                            {
                                list = query.OrderBy(sortBy).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                            }
                        }
                        else//系统默认排序
                        {
                            list = query.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                        }
                        totalCount = query.Count();
                    }
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return list;
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="predicate">Linq表达式[条件查询]</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <param name="totalCount">Out 返回数据总条数</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetPaged(Expression<Func<<#=dbtable.EntityName#>, bool>> predicate, int pageIndex, int pageSize, out int totalCount)
        {
            return GetPaged(predicate, pageIndex, pageSize, out totalCount, null);
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="predicate">Linq表达式[条件查询]</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <param name="totalCount">Out 返回数据总条数</param>
        /// <param name="sortBy">Linq表达式[排序字段]</param>
        /// <param name="desc">默认True为降序,False升序</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetPaged(Expression<Func<<#=dbtable.EntityName#>, bool>> predicate, int pageIndex, int pageSize, out int totalCount, Func<<#=dbtable.EntityName#>, object> sortBy, bool desc = true)
        {
            List<<#=dbtable.EntityName#>> list = null;
            totalCount = 0;
            if (predicate != null)
            {
                try
                {
                    using (<#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>> db = new <#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>>())
                    {
                        IQueryable<<#=dbtable.EntityName#>> query = db.BaseDbSet.Where(predicate);//默认排序
                        if (sortBy != null)//执行排序
                        {
                            if (desc)
                            {
                                list = query.OrderByDescending(sortBy).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                            }
                            else
                            {
                                list = query.OrderBy(sortBy).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                            }
                        }
                        else//系统默认排序
                        {
                            list = query.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                        }
                        totalCount = query.Count();
                    }
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return list;
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="specification">满足Linq表达式规范的组合</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetPaged(ISpecification<<#=dbtable.EntityName#>> specification, int pageIndex, int pageSize)
        {
            return GetPaged(specification.Predicate, pageIndex, pageSize, null);
        }
        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="specification">满足Linq表达式规范的组合</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <param name="sortBy">Linq表达式[排序字段]</param>
        /// <param name="desc">默认True为降序,False升序</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetPaged(ISpecification<<#=dbtable.EntityName#>> specification, int pageIndex, int pageSize, Func<<#=dbtable.EntityName#>, object> sortBy, bool desc = true)
        {
            return GetPaged(specification.Predicate, pageIndex, pageSize, sortBy, desc);
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="specification">满足Linq表达式规范的组合</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <param name="totalCount">Out 返回数据总条数</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetPaged(ISpecification<<#=dbtable.EntityName#>> specification, int pageIndex, int pageSize, out int totalCount)
        {
            return GetPaged(specification.Predicate, pageIndex, pageSize, out totalCount, null);
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="specification">满足Linq表达式规范的组合</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <param name="totalCount">Out 返回数据总条数</param>
        /// <param name="sortBy">Linq表达式[排序字段]</param>
        /// <param name="desc">默认True为降序,False升序</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetPaged(ISpecification<<#=dbtable.EntityName#>> specification, int pageIndex, int pageSize, out int totalCount, Func<<#=dbtable.EntityName#>, object> sortBy, bool desc = true)
        {
            return GetPaged(specification.Predicate, pageIndex, pageSize, out totalCount, sortBy, desc);
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="predicate">Linq表达式[条件查询]</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>db.BaseDbSet
        /// <param name="totalCount">Out 返回数据总条数</param>
        /// <param name="sortDic">字典存放多个排序字段，Key = 默认True为降序,False升序</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetPaged(Expression<Func<<#=dbtable.EntityName#>, bool>> predicate, int pageIndex, int pageSize, out int totalCount, Dictionary<Func<<#=dbtable.EntityName#>, object>,bool> sortDic)
        {
            List<<#=dbtable.EntityName#>> list = null;
            totalCount = 0;
            if (predicate != null)
            {
                try
                {
                    using (<#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>> db = new <#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>>())
                    {
                        IQueryable<<#=dbtable.EntityName#>> query = db.BaseDbSet.Where(predicate);
                        IOrderedEnumerable<<#=dbtable.EntityName#>> queryOrder = null;
                        int num = 0;
                        foreach (KeyValuePair<Func<<#=dbtable.EntityName#>, object>,bool> kvp in sortDic)
                        {
                            if (num == 0)//第一个
                            {
                                if (kvp.Value)//True为降序
                                {
                                    queryOrder = query.OrderByDescending(kvp.Key);
                                }
                                else
                                {
                                    queryOrder = query.OrderBy(kvp.Key);
                                }
                            }
                            else
                            {
                                if (kvp.Value)//True为降序
                                {
                                    queryOrder = queryOrder.ThenByDescending(kvp.Key);
                                }
                                else
                                {
                                    queryOrder = queryOrder.ThenBy(kvp.Key);
                                }
                            }
                            num++;
                        }
                        if (queryOrder != null)
                        {
                            list = queryOrder.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                        }
                        else//系统默认排序
                        {
                            list = query.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                        }
                        totalCount = query.Count();
                    }
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return list;
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="specification">满足Linq表达式规范的组合</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <param name="totalCount">Out 返回数据总条数</param>
        /// <param name="sortDic">字典存放多个排序字段，Key = 默认True为降序,False升序</param>
        /// <returns><#=dbtable.EntityName#>实体对象的List集合</returns>
        public static List<<#=dbtable.EntityName#>> GetPaged(ISpecification<<#=dbtable.EntityName#>> specification, int pageIndex, int pageSize, out int totalCount, Dictionary<Func<<#=dbtable.EntityName#>, object>,bool> sortDic)
        {
            return GetPaged(specification.Predicate, pageIndex, pageSize, out totalCount, sortDic);
        }

        #endregion

        <# if(dbtable.TableType=="BASE TABLE"){#>#region ========Ajax Form Submit

        /// <summary>
        /// 配合前台ajax_form_submit.js文件的提交方式，封装成简易版添加，更改方法
        /// </summary>
        /// <param name="rval">表单集合字符串</param>
        /// <returns></returns>
        public static string AjaxEdit(string rval)
        {
            string result = "操作有误";
            <#foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, dbtable.TableName)){if(column.IsPrimaryKey){#>int id = Util.StringToInt(rval.GetFromValue("<#=column.ColumnName#>"), 0);<#}}#>

            try
            {
                using (<#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>> db = new <#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>>())
                {
                    <#=dbtable.EntityName#> entity = new <#=dbtable.EntityName#>();
                    if (id == 0)//添加操作
                    {
                        if (entity != null)
                        {
                            entity = rval.ConvertToModel(entity);//赋值
                            db.BaseDbSet.Add(entity);
                            if (db.SaveChanges() > 0)
                            {
                                result = "保存成功";
                            }
                        }
                    }
                    else if (id > 0)//更新操作
                    {
                        <#foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, dbtable.TableName)){if(column.IsPrimaryKey){#>entity = db.BaseDbSet.FirstOrDefault(o => o.<#=column.ColumnName#> == id);//查询<#}}#>

                        entity = rval.ConvertToModel(entity);//赋值
                        DbEntityEntry entry = db.Entry(entity);
                        //if (entry.State == EntityState.Detached)
                        //{
                        entry.State = EntityState.Modified;//通过更改 状态为EntityState.Modified 然后再保存 来实现更新操作
                        //}
                        result = "您没有做任何更改";
                        if (db.SaveChanges() > 0)
                        {
                            result = "保存成功";
                        }
                        else
                        {
                            result = "保存时遇到问题";
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                result = "操作有误" + ex.Message;
                log.Error("操作有误", ex);
                return result;
            }
            return result;
        }

        /// <summary>
        /// 配合前台ajax_form_submit_json.js文件的提交方式，封装成简易版添加，更改方法
        /// </summary>
        /// <param name="rval">表单集合字符串</param>
        /// <returns></returns>
        public static string AjaxEdit(<#=dbtable.EntityName#> entity)
        {
            string result = "操作有误";
            try
            {
                if (entity != null)
                {
                    using (<#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>> db = new <#=dbtable.TableType=="BASE TABLE" ? "BaseEntityDbContext":"BaseViewDbContext"#><<#=dbtable.EntityName#>>())
                    {
					<#
						  var PrimaryKey="";
						  foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, dbtable.TableName))
						  {
							if(column.IsPrimaryKey)
							{
								PrimaryKey=column.ColumnName;
								break;
							}
						  }
					#>
                        if (entity.<#=PrimaryKey#>== 0)//添加操作
                        {
                            db.BaseDbSet.Add(entity);
                            if (db.SaveChanges() > 0)
                            {
                                result = "保存成功";
                            }
                        }
                        else if (entity.<#=PrimaryKey#> > 0)//更新操作
                        {
						

                            <#=dbtable.EntityName#> edit = db.BaseDbSet.FirstOrDefault(o => o.<#=PrimaryKey#> == entity.<#=PrimaryKey#>);//查询
                            edit = CustomHelper.ConvertToModel(entity, edit);//赋值
                            DbEntityEntry entry = db.Entry(edit);
                            //if (entry.State == EntityState.Detached)
                            //{
                            entry.State = EntityState.Modified;//通过更改 状态为EntityState.Modified 然后再保存 来实现更新操作
                            //}
                            result = "您没有做任何更改";
                            if (db.SaveChanges() > 0)
                            {
                                result = "保存成功";
                            }
                            else
                            {
                                result = "保存时遇到问题";
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                result = "操作有误" + ex.Message;
                log.Error("操作有误", ex);
                return result;
            }
            return result;
        }

        #endregion<#}#>

    }
}

<# 
//结束--------------------------------------------------------------------------------------------
#>
<#
manager.EndBlock();//结束输出文件
#>

<#
}//循环数据表结束
#>
       
<#
manager.Process(true);//执行编译  
#> 

<#+
    public class config
    {
        public static readonly string ConnectionString="server=localhost;user id=root; password=123; database=clump.pro; pooling=false";
        public static readonly string DbDatabase="clump.pro";
    }
#>