<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="MY_SQL_MultipleOutputHelper.ttinclude" #>
<#  
// 初始化
var manager = Manager.Create(Host, GenerationEnvironment);  
foreach(DbTable dbtable in DbHelper.GetDbTables(config.ConnectionString,config.DbDatabase))//循环数据库表
{//循环数据表开始
#>

<# 
manager.StartNewFile(dbtable.EntityName+"Model.cs");//定义输出文件名称
#>
<# 
//开始--------------------------------------------------------------------------------------------
#>
<#
	string field ="";//表字段
	foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, dbtable.TableName)){ 
	if(field==""){
	  field += column.ColumnName;
	}else{
	  field += ","+column.ColumnName;
	}
}#>
//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的...
//    生成时间 <#=string.Format("{0:yyyy-MM-dd HH:mm:ss}",DateTime.Now)#> By CClump
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using Clump.Data.Models.Host.Context;
using Clump.Core.Dapper;
using Clump.Utility.UI.PagerWebdiyer;

namespace Clump.Data.Models.Host
{
    /// <summary>
    /// <#=dbtable.TableComment#>
    /// </summary>
    [Serializable]
	[Table("<#=dbtable.TableName#>")]
    public class <#=dbtable.EntityName#>Model : Base<#=dbtable.TableType=="BASE TABLE" ? "Entity":"View"#>Action<<#=dbtable.EntityName#>Model>
    {
        #region Entity Field
        <# foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, dbtable.TableName)){#>
        <#if(column.IsPrimaryKey){#>

        /// <summary>
        /// <#=column.Remark#>
        /// </summary>
        [Key]
        public <#= column.CSharpType#> <#=column.ColumnName#> { get; set; }<#}else  if(column.CSharpType=="string" &&  column.CharLength>0){#>
        
        /// <summary>
        /// <#=column.Remark#>
        /// </summary>
        public <#= column.CSharpType#> <#=column.ColumnName#> { get; set; }<#}else if(column.CSharpType=="DateTime"){#>

        private <#= column.CSharpType#> _<#=column.ColumnName#>;
        ///<summary>
        ///<#=column.Remark#>
        ///</summary>
        public <#= column.CSharpType#> <#=column.ColumnName#>
        {
            get
            {
                if (_<#=column.ColumnName#> != null)
                {
                    if (_<#=column.ColumnName#> == Convert.ToDateTime("0001/1/1 0:00:00"))
                        _<#=column.ColumnName#> = DateTime.Now;
                }
                else
                {
                    _<#=column.ColumnName#> = DateTime.Now;
                }
                return _<#=column.ColumnName#>;
            }
            set
            {
                if (value != null)
                {
                    if (value == Convert.ToDateTime("0001/1/1 0:00:00"))
                        value = DateTime.Now;
                }
                else
                {
                    value = DateTime.Now;
                }
                _<#=column.ColumnName#> = value;
            }
        }<#}else if(column.CSharpType=="bool"){#>
        
        /// <summary>
        /// <#=column.Remark#>
        /// </summary>
        public <#= column.CSharpType#> <#=column.ColumnName#> { get; set; }

		  <# }else{#>

        /// <summary>
        /// <#=column.Remark#>
        /// </summary>
        public <#= column.CSharpType#><#=dbtable.TableType=="BASE TABLE" ? "":"?"#> <#=column.ColumnName#> { get; set; }
        <#}#>

        <#}#>#endregion

        #region ==========查询单一实体

        /// <summary>
        /// 根据主键ID取得单一实体,如果没有找到则返回null
        /// </summary>
        /// <param name="id">实体的主键ID</param>
        /// <returns><#=dbtable.EntityName#>Model实体对象</returns>
        public static <#=dbtable.EntityName#>Model Single(int id)
        {
            return new <#=dbtable.EntityName#>Model().Get(id);
        }

        /// <summary>
        /// 根据where条件取得单一实体,如果没有找到则返回null
        /// </summary>
        /// <param name="where">where语句</param>
        /// <param name="param">参数化对象</param>
        /// <returns><#=dbtable.EntityName#>Model实体对象</returns>
        public static <#=dbtable.EntityName#>Model Single(string where, object param = null)
        {
            return new <#=dbtable.EntityName#>Model().Get(where, param);
        }
        #endregion

        #region ==========查询列表集合

        /// <summary>
        /// 查询List集合
        /// </summary>
        /// <param name="where">where语句</param>
        /// <param name="param">参数化对象</param>
        /// <param name="orderBy">排序语句[例子：order by id desc ]</param>
        /// <returns>List集合</returns>
        public static List<<#=dbtable.EntityName#>Model> GetQuery(string where, object param = null, string orderBy = null)
        {
            return new <#=dbtable.EntityName#>Model().GetList(string.Format("SELECT <#=field#> FROM <#=dbtable.TableName#> WHERE {0} {1}", where, orderBy), param);
        }

        /// <summary>
        /// 根据指定的字段名，查询List集合
        /// </summary>
        /// <param name="field">查询的字段名[英文逗号分隔]</param>
        /// <param name="where">where语句</param>
        /// <param name="param">参数化对象</param>
        /// <param name="orderBy">排序语句[例子：order by id desc ]</param>
        /// <returns></returns>
        public static List<<#=dbtable.EntityName#>Model> GetQuery(string field, string where, object param = null, string orderBy = null)
        {
            return new <#=dbtable.EntityName#>Model().GetList(string.Format("SELECT {0} FROM <#=dbtable.TableName#> WHERE {1} {2}", field, where, orderBy), param);
        }

        /// <summary>
        /// 查询List集合的前几条
        /// </summary>
        /// <param name="top">前多少条</param>
        /// <param name="where">where语句</param>
        /// <param name="param">参数化对象</param>
        /// <param name="orderBy">排序语句[例子：order by id desc ]</param>
        /// <returns>List集合</returns>
        public static List<<#=dbtable.EntityName#>Model> GetQuery(int top, string where, object param = null, string orderBy = null)
        {
            return new <#=dbtable.EntityName#>Model().GetList(string.Format("SELECT <#=field#> FROM <#=dbtable.TableName#> WHERE {0} {1} Limit 0,{2}", where, orderBy, top), param);
        }

        /// <summary>
        /// 根据指定的字段名，查询List集合的前几条
        /// </summary>
        /// <param name="top">前多少条</param>
        /// <param name="field">查询的字段名[英文逗号分隔]</param>
        /// <param name="where">where语句</param>
        /// <param name="param">参数化对象</param>
        /// <param name="orderBy">排序语句[例子：order by id desc ]</param>
        /// <returns></returns>
        public static List<<#=dbtable.EntityName#>Model> GetQuery(int top, string field, string where, object param = null, string orderBy = null)
        {
            return new <#=dbtable.EntityName#>Model().GetList(string.Format("SELECT {0} FROM <#=dbtable.TableName#> WHERE {1} {2} Limit 0,{3}", field, where, orderBy, top), param);
        }

        /// <summary>
        /// 根据条件获取条数
        /// </summary>
        /// <param name="where">sql条件</param>
        /// <param name="param">参数化</param>
        /// <returns></returns>
        public static int Count(string where, object param = null)
        {
            return new <#=dbtable.EntityName#>Model().GetCount("SELECT COUNT(*) FROM <#=dbtable.TableName#> WHERE " + where, param);
        }

        /// <summary>
        /// 根据条件获取表中某一字段非空的条数
        /// </summary>
        /// <param name="fieldname">表的某一个字段</param>
        /// <param name="where">sql条件</param>
        /// <param name="param">参数化</param>
        /// <returns></returns>
        public static int Count(string fieldname, string where, object param = null)
        {
            return new <#=dbtable.EntityName#>Model().GetCount(string.Format("SELECT COUNT({0}) FROM <#=dbtable.TableName#> WHERE {1}", fieldname, where), param);
        }

        /// <summary>
        /// 分页查询
        /// </summary>
        /// <param name="pageSize">每页条数</param>
        /// <param name="pageIndex">页码</param>
        /// <param name="totalCount">总条数</param>
        /// <param name="where">查询条件</param>
        /// <param name="param">条件语句参数化</param>
        /// <param name="orderBy">排序</param>
        /// <returns></returns>
        public static PagedList<<#=dbtable.EntityName#>Model> GetPaged(int pageSize, int pageIndex, out int totalCount, string where, object param = null, string orderBy = null)
        {
            string orderByNow = " ORDER BY ID DESC ";
            if (orderBy != null && orderBy != "")
            {
                orderByNow = orderBy;
            }
            totalCount = 0;
            int topNum = pageSize * (pageIndex - 1);
			string field="<#=field#>";
            string sql = string.Format("SELECT {0} FROM <#=dbtable.TableName#> ", field);
            if (topNum <= 0)
            {
                sql = string.Format("SELECT {0} FROM <#=dbtable.TableName#> WHERE {1} {2} LIMIT 0,{3}", field, where, orderByNow, pageSize);
            }
            else
            {
                sql = string.Format("SELECT {0} FROM <#=dbtable.TableName#> WHERE {1} {2} LIMIT {3},{4}", field, where, orderByNow, topNum, pageSize);
            }
            try
            {
                totalCount = new <#=dbtable.EntityName#>Model().GetCount(string.Format("SELECT COUNT(*) FROM <#=dbtable.TableName#> WHERE {0}", where), param);
                return new PagedList<<#=dbtable.EntityName#>Model>(new <#=dbtable.EntityName#>Model().GetList(sql, param), pageIndex, pageSize, totalCount);
            }
            catch (Exception e)
            {
                log.Error("获取分页数据失败", e);
                return null;
            }
        }

        /// <summary>
        /// 分页查询,指定查询的字段名
        /// </summary>
        /// <param name="pageSize">每页条数</param>
        /// <param name="pageIndex">页码</param>
        /// <param name="totalCount">总条数</param>
        /// <param name="field">查询的字段名[英文逗号分隔]</param>
        /// <param name="where">查询条件</param>
        /// <param name="param">条件语句参数化</param>
        /// <param name="orderBy">排序</param>
        /// <returns></returns>
        public static PagedList<<#=dbtable.EntityName#>Model> GetPaged(int pageSize, int pageIndex, out int totalCount, string field, string where, object param = null, string orderBy = null)
        {
            string orderByNow = " ORDER BY ID DESC ";
            if (orderBy != null && orderBy != "")
            {
                orderByNow = orderBy;
            }
            totalCount = 0;
            int topNum = pageSize * (pageIndex - 1);
            string sql = string.Format("SELECT {0} FROM <#=dbtable.TableName#> ", field);
            if (topNum <= 0)
            {
                sql = string.Format("SELECT {0} FROM <#=dbtable.TableName#> WHERE {1} {2} LIMIT 0,{3}", field, where, orderByNow, pageSize);
            }
            else
            {
                sql = string.Format("SELECT {0} FROM <#=dbtable.TableName#> WHERE {1} {2} LIMIT {3},{4}", field, where, orderByNow, topNum, pageSize);
            }
            try
            {
                totalCount = new <#=dbtable.EntityName#>Model().GetCount(string.Format("SELECT COUNT(*) FROM <#=dbtable.TableName#> WHERE {0}", where), param);
                return new PagedList<<#=dbtable.EntityName#>Model>(new <#=dbtable.EntityName#>Model().GetList(sql, param), pageIndex, pageSize, totalCount);
            }
            catch (Exception e)
            {
                log.Error("获取分页数据失败", e);
                return null;
            }
        }

        #endregion

        #region Hyperemia
        public override BaseEntity Clone()
        {
            return this as BaseEntity;
        }
        #endregion
    }
}

<# 
//结束--------------------------------------------------------------------------------------------
#>
<#
manager.EndBlock();//结束输出文件
#>

<#
}//循环数据表结束
#>
       
<#
manager.Process(true);//执行编译  
#> 

<#+
    public class config
    {
        public static readonly string ConnectionString="server=localhost;user id=root; password=123456; database=clump_host; pooling=false";
        public static readonly string DbDatabase="clump_host";
    }
#>