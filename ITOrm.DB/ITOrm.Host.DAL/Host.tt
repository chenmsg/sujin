<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="MY_SQL_MultipleOutputHelper.ttinclude" #>
<#  
// 初始化
var manager = Manager.Create(Host, GenerationEnvironment);  
foreach(DbTable dbtable in DbHelper.GetDbTables(config.ConnectionString,config.DbDatabase))//循环数据库表
{//循环数据表开始
	//逍遥法外
	if(config.atlarge.Contains( ","+dbtable.TableName+","))
    {
		break;
	}
#>

<# 
manager.StartNewFile(dbtable.EntityName+"DAL.cs");//定义输出文件名称
#>
<# 
//开始--------------------------------------------------------------------------------------------
#>
<#
	string field ="";//表字段
	string fristColumn="";//第一列的列名，视图用
	bool isTable=(dbtable.TableType=="U");//是否是Table     不是Table就是视图
	string primaryKey ="";//主键ID字段名称
	foreach(DbColumn column in DbHelper.GetDbColumns(config.ConnectionString, config.DbDatabase, dbtable.TableName)){
    if(column.IsPrimaryKey){
	  primaryKey = column.ColumnName;
	}
	if(field==""){
	  field += column.ColumnName;
		fristColumn=column.ColumnName;
	}else{
	  field += ","+column.ColumnName;
	}
}#>
//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的...
//    生成时间 <#=string.Format("{0:yyyy-MM-dd HH:mm:ss}",DateTime.Now)#> By CClump
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using ITOrm.Core.Utility.PagerWebdiyer;
using ITOrm.Host.Models;
using ITOrm.Core.Dapper.Context;
namespace ITOrm.Host.DAL
{
    /// <summary>
    /// <#=dbtable.TableComment#>接口
    /// </summary>
    public interface I<#=dbtable.EntityName#>DAL
    {
		<#if(isTable){#>
#region ==========增删改数据
        /// <summary>
        /// 插入数据
        /// </summary>
        /// <returns>返回,成功:true,失败:false</returns>
        int Insert(<#=dbtable.EntityName#> entity);

        /// <summary>
        /// Update的对象，必须通过Single()获取重置属性后操作！传入实体修改，根据传入的实体主健修改，如果是new出来的实体，则要把Single()的对象赋给他才可更新
        /// </summary>
        /// <returns>返回,成功:true,失败:false</returns>
        bool Update(<#=dbtable.EntityName#> entity);

        /// <summary>
        /// Delete，根据实体对象删除
        /// </summary>
        /// <returns>返回,成功:true,失败:false</returns>
        bool Delete(<#=dbtable.EntityName#> entity);

        /// <summary>
        /// 根据主键ID删除数据
        /// </summary>
        /// <param name="id">主键ID的值</param>
        /// <param name="name">主键ID的数据库字段名称，默认是ID</param>
        /// <returns></returns>
        bool Delete(int id);

        #endregion
		<#}#>

        #region ==========查询单一实体

        /// <summary>
        /// 根据主键ID取得单一实体,如果没有找到则返回null
        /// </summary>
        /// <param name="id">实体的主键ID</param>
        /// <returns><#=dbtable.EntityName#>实体对象</returns>
        <#=dbtable.EntityName#> Single(int id);

        /// <summary>
        /// 根据where条件取得单一实体,如果没有找到则返回null
        /// </summary>
        /// <param name="where">where语句</param>
        /// <param name="param">参数化对象</param>
        /// <returns><#=dbtable.EntityName#>实体对象</returns>
        <#=dbtable.EntityName#> Single(string where, object param = null);

        #endregion

        #region ==========查询列表集合

        /// <summary>
        /// 查询List集合
        /// </summary>
        /// <param name="where">where语句</param>
        /// <param name="param">参数化对象</param>
        /// <param name="orderBy">排序语句[例子：order by id desc ]</param>
        /// <returns>List集合</returns>
        List<<#=dbtable.EntityName#>> GetQuery(string where, object param = null, string orderBy = null);



        /// <summary>
        /// 查询List集合的前几条
        /// </summary>
        /// <param name="top">前多少条</param>
        /// <param name="where">where语句</param>
        /// <param name="param">参数化对象</param>
        /// <param name="orderBy">排序语句[例子：order by id desc ]</param>
        /// <returns>List集合</returns>
        List<<#=dbtable.EntityName#>> GetQuery(int top, string where, object param = null, string orderBy = null);


        /// <summary>
        /// 根据条件获取条数
        /// </summary>
        /// <param name="where">sql条件</param>
        /// <param name="param">参数化</param>
        /// <returns></returns>
        int Count(string where, object param = null);


		/// <summary>
        /// 根据sql条件查询单一字段内容
        /// </summary>
        /// <param name="where">sql条件</param>
        /// <param name="param">参数化</param>
        /// <returns></returns>
        object Scalar(string sql, object param = null);

        
        /// <summary>
        /// 分页查询
        /// </summary>
        /// <param name="pageSize">每页条数</param>
        /// <param name="pageIndex">页码</param>
        /// <param name="totalCount">总条数</param>
        /// <param name="where">查询条件</param>
        /// <param name="param">条件语句参数化</param>
        /// <param name="orderBy">排序</param>
        /// <returns></returns>
        List<<#=dbtable.EntityName#>> GetPaged(int pageSize, int pageIndex, out int totalCount, string where, object param = null, string orderBy = null);

        


        #endregion

    }

    /// <summary>
    /// <#=dbtable.TableComment#>
    /// </summary>
    public class <#=dbtable.EntityName#>DAL : Base<#=isTable ? "Entity":"View"#>Action<<#=dbtable.EntityName#>>, I<#=dbtable.EntityName#>DAL
    {
	    <#if(isTable){#>
#region ==========增删改数据

        /// <summary>
        /// 插入数据
        /// </summary>
        /// <returns>返回,成功:true,失败:false</returns>
        public new  int Insert(<#=dbtable.EntityName#> entity)
        {
			if (entity == null) throw new ArgumentNullException("obj");
            var Id = base.Insert(entity);
            if (Id > 0)
            {
                Single(entity.<#=primaryKey#>);
                return Id;
            }
            else
            {
                return 0;
            }
        }

        /// <summary>
        /// Update的对象，必须通过Single()获取重置属性后操作！传入实体修改，根据传入的实体主健修改，如果是new出来的实体，则要把Single()的对象赋给他才可更新
        /// </summary>
        /// <returns>返回,成功:true,失败:false</returns>
        public new bool Update(<#=dbtable.EntityName#> entity)
        {
			if (entity == null) throw new ArgumentNullException("obj");
            var result = base.Update(entity);
            if (result)
            {
                RemoveCache(entity.<#=primaryKey#>);
				Single(entity.<#=primaryKey#>);
                return result;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// Delete，根据实体对象删除
        /// </summary>
        /// <returns>返回,成功:true,失败:false</returns>
        public new  bool Delete(<#=dbtable.EntityName#> entity)
        {
            if (entity == null) throw new ArgumentNullException("obj");
            var result = base.Delete(entity);
            if (result)
            {
                RemoveCache(entity.<#=primaryKey#>);
                return result;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
        /// 根据主键ID删除数据
        /// </summary>
        /// <param name="id">主键ID的值</param>
        /// <returns></returns>
        public bool Delete(int id)
        {
            if (id>0) throw new ArgumentNullException("obj");
            var result = base.Delete(id, "<#=primaryKey#>");
            if (result)
            {
                RemoveCache(id);
                return result;
            }
            else
            {
                return false;
            }
        }

        #endregion
		<#}#>
#region ==========查询单一实体


        /// <summary>
        /// 根据主键ID取得单一实体,如果没有找到则返回null
        /// </summary>
        /// <param name="id">实体的主键ID</param>
        /// <returns><#=dbtable.EntityName#>实体对象</returns>
        public <#=dbtable.EntityName#> Single(int id)
        {
		<#if(isTable && !config.IsCached.Contains(","+dbtable.EntityName+",")){#>

            var key = EncodeKey("<#=primaryKey#>", id);
            var result = Memcache.Get(key) as <#=dbtable.TableName#>;
            if (result == null)
            {
                result = base.Single(id, "<#=isTable?primaryKey:fristColumn#>");
                Memcache.Store(key, result, DurationCache);
            }
            return result;
		<#}else {#>
			return base.Single(id, "<#=isTable?primaryKey:fristColumn#>");
		<#}#>

		}


        /// <summary>
        /// 根据where条件取得单一实体,如果没有找到则返回null
        /// </summary>
        /// <param name="where">where语句</param>
        /// <param name="param">参数化对象</param>
        /// <returns><#=dbtable.EntityName#>实体对象</returns>
        public <#=isTable ? "":"new"#>  <#=dbtable.EntityName#> Single(string where, object param = null)
        {
			<#if(isTable ){#>

			var	result = base.Single(where, param,"<#=isTable?primaryKey:fristColumn#>");
            return Single(result);

			<#}else{#>

			return base.Single(where, param);

			<#}#>
        }
        #endregion

        #region ==========查询列表集合

        /// <summary>
        /// 查询List集合
        /// </summary>
        /// <param name="where">where语句</param>
        /// <param name="param">参数化对象</param>
        /// <param name="orderBy">排序语句[例子：order by id desc ]</param>
        /// <returns>List集合</returns>
        public List<<#=dbtable.EntityName#>> GetQuery(string where, object param = null, string orderBy = null)
        {
			<#if(isTable ){#>
            var result = base.GetQuery(string.Format("SELECT <#=primaryKey#> FROM <#=dbtable.TableName#> WITH(NOLOCK) WHERE {0} {1}", where, orderBy), param);
            return MappingCacheEntity(result);
			<#}else{#>
			return base.GetQuery(string.Format("SELECT <#=field#> FROM <#=dbtable.TableName#> WITH(NOLOCK) WHERE {0} {1}", where, orderBy), param);
			<#}#>
        }


        /// <summary>
        /// 查询List集合的前几条
        /// </summary>
        /// <param name="top">前多少条</param>
        /// <param name="where">where语句</param>
        /// <param name="param">参数化对象</param>
        /// <param name="orderBy">排序语句[例子：order by id desc ]</param>
        /// <returns>List集合</returns>
        public List<<#=dbtable.EntityName#>> GetQuery(int top, string where, object param = null, string orderBy = null)
        {
			<#if(isTable ){#>
            var result = base.GetQuery(string.Format("SELECT top {2} <#=primaryKey#> FROM <#=dbtable.TableName#> WITH(NOLOCK) WHERE {0} {1} ", where, orderBy, top), param);
			return MappingCacheEntity(result);
			<#}else{#>
			return base.GetQuery(string.Format("SELECT top {2} <#=field#> FROM <#=dbtable.TableName#> WITH(NOLOCK) WHERE {0} {1} ", where, orderBy, top), param);
			<#}#>
        }


        /// <summary>
        /// 根据条件获取条数
        /// </summary>
        /// <param name="where">sql条件</param>
        /// <param name="param">参数化</param>
        /// <returns></returns>
        public new int Count(string where, object param = null)
        {
            return base.Count("SELECT COUNT(0) FROM <#=dbtable.TableName#> WITH(NOLOCK) WHERE " + where, param);
        }



		/// <summary>
        /// 根据sql条件查询单一字段内容
        /// </summary>
        /// <param name="where">sql条件</param>
        /// <param name="param">参数化</param>
        /// <returns></returns>
        public object Scalar(string sql, object param = null)
        {
            return base.GetScalar(sql, param);
        }

        

		

		/// <summary>
        /// 分页查询
        /// </summary>
        /// <param name="pageSize">每页条数</param>
        /// <param name="pageIndex">页码</param>
        /// <param name="totalCount">总条数</param>
        /// <param name="where">查询条件</param>
        /// <param name="param">条件语句参数化</param>
        /// <param name="orderBy">排序</param>
        /// <returns></returns>
        public List<<#=dbtable.EntityName#>> GetPaged(int pageSize, int pageIndex, out int totalCount, string where, object param = null, string orderBy = null)
        {
            string orderByNow = " ORDER BY <#=isTable ? primaryKey:fristColumn#> DESC ";
            if (!string.IsNullOrEmpty(orderBy))
            {
                orderByNow = orderBy;
            }
            totalCount = 0;
            int topNum = pageSize * (pageIndex - 1) + 1;
			string field="<#=isTable ? primaryKey:field#>";
            string sql = string.Format("SELECT {0} FROM <#=dbtable.TableName#> ", field);
            if (topNum <= 1)
            {
				sql = string.Format("SELECT {0} FROM (SELECT ROW_NUMBER() OVER({1}) as 'RowNumber', {0} from <#=dbtable.TableName#> WITH(NOLOCK) {3} ) as temp WHERE (RowNumber between 0 and {2} ) ", field, orderByNow, pageSize, (!string.IsNullOrEmpty(where) ? " WHERE " + where : ""));
            }
            else
            {
                sql = string.Format("SELECT {0} FROM (SELECT ROW_NUMBER() OVER({1}) as 'RowNumber', {0} from <#=dbtable.TableName#> WITH(NOLOCK) {4} ) as temp WHERE (RowNumber between {2} and {3} ) ", field, orderByNow, topNum, (topNum + pageSize-1), (!string.IsNullOrEmpty(where) ? " WHERE " + where : ""));
            }
            try
            {
                totalCount = Count(where, param);
				<#if(isTable){#>
				var result = base.GetQuery(sql, param);
                return MappingCacheEntity(result);
				<#}else{#>
				return base.GetQuery(sql, param);
				<#}#>
                
            }
            catch (Exception e)
            {
                log.Error("获取分页数据失败", e);
                return null;
            }
        }








        #endregion

		<#if(isTable){#>

		#region ==========缓存操作
		/// <summary>
        /// Memcache Key编码
        /// </summary>
        /// <param name="paramName"></param>
        /// <param name="paramValue"></param>
        /// <returns></returns>
        private string EncodeKey(string paramName, object paramValue)
        {
            return Memcache.EncodeKey("<#=config.DbDatabase#>", "<#=dbtable.TableName#>", paramName, paramValue);
        }

		/// <summary>
        /// 清理缓存
        /// </summary>
        /// <param name="Id"></param>
        public void RemoveCache(long Id)
        {
            var key = EncodeKey("<#=primaryKey#>", Id);
            Memcache.Remove(key);
        }

		/// <summary>
        /// 批量操作缓存
        /// </summary>
        /// <param name="result"></param>
        /// <returns></returns>        
        private List<<#=dbtable.TableName#>> MappingCacheEntity(List<int> result)
        {
            //exists result is null(empty)
            if (result != null && result.Count > 0)
            {
                String key = string.Empty;
                <#=dbtable.TableName#> cache = null;
                List<<#=dbtable.TableName#>> result_cache = new List<<#=dbtable.TableName#>>(result.Count);

                foreach (var item in result)
                {
                    key = EncodeKey("<#=primaryKey#>", item);
                    cache = Memcache.Get(key) as <#=dbtable.TableName#>;
                    if (cache == null)
                    {
                        cache = Single(item);
                        Memcache.Store(key, cache, DurationCache);
                    }

                    if (cache != null)
                        result_cache.Add(cache);
                }
                return result_cache;
            }
            return null;
        }
		#endregion

		<#}#>
    }
}

<# 
//结束--------------------------------------------------------------------------------------------
#>
<#
manager.EndBlock();//结束输出文件
#>

<#
}//循环数据表结束
#>
       
<#
manager.Process(true);//执行编译  
#> 

<#+
    public class config
    {
        public static readonly string ConnectionString="Data Source=122.14.218.15,55531;Initial Catalog=SujinDB;User ID=sa;Password=sujin@ITORM.COM";
        public static readonly string DbDatabase="SujinDB";
		//Single不参与缓存
		public static readonly string IsCached=",Account,AccountQueue,AccountRecord,";
		//逍遥法外  ,Modules,SystemIcon,view_Modules,
		public static readonly string atlarge="";
    }
#>