//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的...
//    生成时间 2016-01-12 18:04:04 By CClump
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Linq.Expressions;
using System.Data.Entity.Infrastructure;
using ITOrm.EF.Models.Specification;
using ITOrm.EF.Models.Helper;
using ITOrm.EF.Models.Context;
namespace ITOrm.EF.Models.Host
{
    /// <summary>
    /// 表: 备注
    /// </summary>
    [Serializable]
    public class AdminUser : BaseEntityAction<AdminUser>
    {
        #region Entity Field
                
        /// <summary>
        /// 用户编号
        /// </summary>
        [Key]
        public int ID { get; set; }
                        
        /// <summary>
        /// 姓名
        /// </summary>
        [StringLength(20)]
        public string Name { get; set; }
                
        /// <summary>
        /// 性别 0男 1女
        /// </summary>
		public int Sex { get; set; }
		        
                        
        /// <summary>
        /// 用户名
        /// </summary>
        [StringLength(20)]
        public string UserName { get; set; }
                        
        /// <summary>
        /// 密码
        /// </summary>
        [StringLength(100)]
        public string Password { get; set; }
                
        private DateTime _LoginTime;
        ///<summary>
        ///登录时间
        ///</summary>
        public DateTime LoginTime
        {
            get
            {
                if (_LoginTime != null)
                {
                    if (_LoginTime == Convert.ToDateTime("0001/1/1 0:00:00"))
                        _LoginTime = DateTime.Now;
                }
                else
                {
                    _LoginTime = DateTime.Now;
                }
                return _LoginTime;
            }
            set
            {
                if (value != null)
                {
                    if (value == Convert.ToDateTime("0001/1/1 0:00:00"))
                        value = DateTime.Now;
                }
                else
                {
                    value = DateTime.Now;
                }
                _LoginTime = value;
            }
        }
                        
        /// <summary>
        /// 用户头像
        /// </summary>
        [StringLength(300)]
        public string HeadImg { get; set; }
                
        /// <summary>
        /// 状态  0可用 1不可用
        /// </summary>
		public int State { get; set; }
		        
                
        /// <summary>
        /// 推荐  0不推荐 1推荐
        /// </summary>
		public int IsRecommend { get; set; }
		        
                
        private DateTime _AddTime;
        ///<summary>
        ///创建时间
        ///</summary>
        public DateTime AddTime
        {
            get
            {
                if (_AddTime != null)
                {
                    if (_AddTime == Convert.ToDateTime("0001/1/1 0:00:00"))
                        _AddTime = DateTime.Now;
                }
                else
                {
                    _AddTime = DateTime.Now;
                }
                return _AddTime;
            }
            set
            {
                if (value != null)
                {
                    if (value == Convert.ToDateTime("0001/1/1 0:00:00"))
                        value = DateTime.Now;
                }
                else
                {
                    value = DateTime.Now;
                }
                _AddTime = value;
            }
        }
                
        private DateTime _BirthDay;
        ///<summary>
        ///生日  
        ///</summary>
        public DateTime BirthDay
        {
            get
            {
                if (_BirthDay != null)
                {
                    if (_BirthDay == Convert.ToDateTime("0001/1/1 0:00:00"))
                        _BirthDay = DateTime.Now;
                }
                else
                {
                    _BirthDay = DateTime.Now;
                }
                return _BirthDay;
            }
            set
            {
                if (value != null)
                {
                    if (value == Convert.ToDateTime("0001/1/1 0:00:00"))
                        value = DateTime.Now;
                }
                else
                {
                    value = DateTime.Now;
                }
                _BirthDay = value;
            }
        }
                        
        /// <summary>
        /// 手机
        /// </summary>
        [StringLength(12)]
        public string Phone { get; set; }
                
        /// <summary>
        /// 角色
        /// </summary>
		public int Role { get; set; }
		        
                        
        /// <summary>
        /// 职位
        /// </summary>
        [StringLength(20)]
        public string Department { get; set; }
                        
        /// <summary>
        /// 描述
        /// </summary>
        [StringLength(500)]
        public string Context { get; set; }
        #endregion

        #region Data

        /// <summary>
        /// 数据库名称
        /// </summary>
        public override string DataName { get { return "ITOrmdb"; } }

        /// <summary>
        /// 表名称
        /// </summary>
        public override string DataTableName { get { return "AdminUser"; } }

        #endregion

        #region Hyperemia
        public override BaseEntity Clone()
        {
            return this as BaseEntity;
        }
        #endregion

        #region ==========查询单一实体

        /// <summary>
        /// 根据lamda表达式获取单一实体,如果没有找到则返回null
        /// </summary>
        /// <param name="specification">满足表达式规范的组合</param>
        /// <returns>AdminUser实体对象</returns>
        public static AdminUser Single(ISpecification<AdminUser> specification)
        {
            AdminUser entity = new AdminUser();
            if (specification != null)
            {
                try
                {
                    using (BaseEntityDbContext<AdminUser> db = new BaseEntityDbContext<AdminUser>())
                    {
                        entity = db.BaseDbSet.FirstOrDefault(specification.Predicate);
					}
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return entity;
        }

        /// <summary>
        /// 根据lamda表达式获取单一实体,如果没有找到则返回null
        /// </summary>
        /// <param name="predicate">表达式</param>
        /// <returns>AdminUser实体对象</returns>
        public static AdminUser Single(Expression<Func<AdminUser, bool>> predicate)
        {
            AdminUser entity = new AdminUser();
            if (predicate != null)
            {
                try
                {
                    using (BaseEntityDbContext<AdminUser> db = new BaseEntityDbContext<AdminUser>())
                    {
                        entity = db.BaseDbSet.FirstOrDefault(predicate);
					}
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return entity;
        }

        /// <summary>
        /// 根据主键ID取得单一实体,如果没有找到则返回null
        /// </summary>
        /// <param name="id">实体的主键ID</param>
        /// <returns>AdminUser实体对象</returns>
        public static AdminUser Single(int id)
        {
            AdminUser entity = new AdminUser();
            if (id > 0)
            {
                try
                {
                    using (BaseEntityDbContext<AdminUser> db = new BaseEntityDbContext<AdminUser>())
                    {
                        entity = db.BaseDbSet.FirstOrDefault(o => o.ID == id);					}
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return entity;
        }

        #endregion

        #region ==========查询数据

        /// <summary>
        /// 获取条数
        /// </summary>
        /// <param name="predicate">表达式</param>
        /// <returns></returns>
        public static int GetCount(Expression<Func<AdminUser, bool>> predicate)
        {
            int count = 0;
            if (predicate != null)
            {
                try
                {
                    using (BaseEntityDbContext<AdminUser> db = new BaseEntityDbContext<AdminUser>())
                    {
                        count = db.BaseDbSet.Where(predicate).Count();
                    }
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return count;
        }


		/// <summary>
        /// 获取条数
        /// </summary>
        /// <param name="predicate">表达式</param>
        /// <returns></returns>
        public static int GetCount(ISpecification<AdminUser> spec)
        {
            int count = 0;
            if (spec != null)
            {
                try
                {
                    using (BaseEntityDbContext<AdminUser> db = new BaseEntityDbContext<AdminUser>())
                    {
                        count = db.BaseDbSet.Where(spec.Predicate).Count();
                    }
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return count;
        }


        /// <summary>
        /// 获取该实体的查询
        /// </summary>
        /// <param name="predicate">表达式</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetQuery(Expression<Func<AdminUser, bool>> predicate)
        {
            return GetQuery(0, predicate, null);
        }

        public static List<AdminUser> GetQuery(Expression<Func<AdminUser, bool>> predicate, Func<AdminUser, object> sortBy, bool desc = true)
        {
            return GetQuery(0, predicate, sortBy, desc);
        }

        /// <summary>
        /// 获取该实体的查询
        /// </summary>
        /// <param name="top">查询前几条，top小于等于0则展示全部</param>
        /// <param name="predicate">表达式</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetQuery(int top, Expression<Func<AdminUser, bool>> predicate)
        {
            return GetQuery(top, predicate, null);
        }

        /// <summary>
        /// 获取该实体的查询,单排序
        /// </summary>
        /// <param name="top">查询前几条，top小于等于0则展示全部</param>
        /// <param name="predicate">表达式</param>
        /// <param name="sortBy">排序字段</param>
        /// <param name="desc">默认True为降序,False升序</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetQuery(int top, Expression<Func<AdminUser, bool>> predicate, Func<AdminUser, object> sortBy, bool desc = true)
        {
            List<AdminUser> list = null;
            if (predicate != null)
            {
                try
                {
                    using (BaseEntityDbContext<AdminUser> db = new BaseEntityDbContext<AdminUser>())
                    {
                        IQueryable<AdminUser> query = db.BaseDbSet.Where(predicate);//默认排序
                        if (top <= 0 && sortBy == null)//直接返回结果，防止不必要的操作
                        {
                            return query.ToList();
                        }
                        IOrderedEnumerable<AdminUser> queryOrder = null;
                        if (sortBy != null)//执行排序
                        {
                            if (desc)
                            {
                                queryOrder = query.OrderByDescending(sortBy);
                            }
                            else
                            {
                                queryOrder = query.OrderBy(sortBy);
                            }
                        }

                        if (queryOrder != null)
                        {
                            if (top > 0)//top<=0则展示全部
                            {
                                list = queryOrder.Take(top).ToList();
                            }
                            else
                            {
                                list = queryOrder.ToList();
                            }
                        }
                        else
                        {
                            if (top > 0)//top<=0则展示全部
                            {
                                list = query.Take(top).ToList();
                            }
                            else
                            {
                                list = query.ToList();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return list;
        }

        /// <summary>
        /// 获取该实体的查询,多排序
        /// </summary>
        /// <param name="predicate">表达式</param>
        /// <param name="sortDic">字典存放多个排序字段，Key = 默认True为降序,False升序</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetQuery(Expression<Func<AdminUser, bool>> predicate, Dictionary<Func<AdminUser, object>,bool> sortDic)
        {
            return GetQuery(0, predicate, sortDic);
        }

        /// <summary>
        /// 获取该实体的查询,多排序
        /// </summary>
        /// <param name="top">查询前几条，top小于等于0则展示全部</param>
        /// <param name="predicate">表达式</param>
        /// <param name="sortDic">字典存放多个排序字段，Key = 默认True为降序,False升序</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetQuery(int top, Expression<Func<AdminUser, bool>> predicate, Dictionary<Func<AdminUser, object>,bool> sortDic)
        {
            List<AdminUser> list = null;
            if (predicate != null)
            {
                try
                {
                    using (BaseEntityDbContext<AdminUser> db = new BaseEntityDbContext<AdminUser>())
                    {
                        if (sortDic != null && sortDic.Count > 0)//根据字典内的排序执行
                        {
                            IQueryable<AdminUser> query = db.BaseDbSet.Where(predicate);
                            IOrderedEnumerable<AdminUser> queryOrder = null;
                            int num = 0;
                            foreach (KeyValuePair<Func<AdminUser, object>,bool> kvp in sortDic)
                            {
                                if (num == 0)//第一个
                                {
                                    if (kvp.Value)//True为降序
                                    {
                                        queryOrder = query.OrderByDescending(kvp.Key);
                                    }
                                    else
                                    {
                                        queryOrder = query.OrderBy(kvp.Key);
                                    }
                                }
                                else
                                {
                                    if (kvp.Value)//True为降序
                                    {
                                        queryOrder = queryOrder.ThenByDescending(kvp.Key);
                                    }
                                    else
                                    {
                                        queryOrder = queryOrder.ThenBy(kvp.Key);
                                    }
                                }
                                num++;
                            }
                            if (queryOrder != null)
                            {
                                if (top > 0)//top<=0则展示全部
                                {
                                    list = queryOrder.Take(top).ToList();
                                }
                                else
                                {
                                    list = queryOrder.ToList();
                                }
                            }
                            else
                            {
                                if (top > 0)//top<=0则展示全部
                                {
                                    list = query.Take(top).ToList();
                                }
                                else
                                {
                                    list = query.ToList();
                                }
                            }
                        }
                        else//默认排序 
                        {
                            if (top > 0)//top<=0则展示全部
                            {
                                list = db.BaseDbSet.Where(predicate).Take(top).ToList();
                            }
                            else
                            {
                                list = db.BaseDbSet.Where(predicate).ToList();
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return list;
        }

        /// <summary>
        /// 获取该实体的查询
        /// </summary>
        /// <param name="specification">满足表达式规范的组合</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetQuery(ISpecification<AdminUser> specification)
        {
            return GetQuery(0, specification.Predicate);
        }

        /// <summary>
        /// 获取该实体的查询
        /// </summary>
        /// <param name="top">查询前几条，top小于等于0则展示全部</param>
        /// <param name="specification">满足表达式规范的组合</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetQuery(int top, ISpecification<AdminUser> specification)
        {
            return GetQuery(top, specification.Predicate);
        }

        /// <summary>
        /// 获取该实体的查询,单排序
        /// </summary>
        /// <param name="specification">满足表达式规范的组合</param>
        /// <param name="sortBy">排序字段</param>
        /// <param name="desc">默认True为降序,False升序</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetQuery(ISpecification<AdminUser> specification, Func<AdminUser, object> sortBy, bool desc = true)
        {
            return GetQuery(0, specification.Predicate, sortBy, desc);
        }

        /// <summary>
        /// 获取该实体的查询,单排序
        /// </summary>
        /// <param name="top">查询前几条，top小于等于0则展示全部</param>
        /// <param name="specification">满足表达式规范的组合</param>
        /// <param name="sortBy">排序字段</param>
        /// <param name="desc">默认True为降序,False升序</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetQuery(int top, ISpecification<AdminUser> specification, Func<AdminUser, object> sortBy, bool desc = true)
        {
            return GetQuery(top, specification.Predicate, sortBy, desc);
        }

        /// <summary>
        /// 获取该实体的查询,多排序
        /// </summary>
        /// <param name="specification">满足表达式规范的组合</param>
        /// <param name="sortDic">字典存放多个排序字段，Key = 默认True为降序,False升序</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetQuery(ISpecification<AdminUser> specification, Dictionary<Func<AdminUser, object>,bool> sortDic)
        {
            return GetQuery(0, specification.Predicate, sortDic);
        }

        /// <summary>
        /// 获取该实体的查询,多排序
        /// </summary>
        /// <param name="top">查询前几条，top小于等于0则展示全部</param>
        /// <param name="specification">满足表达式规范的组合</param>
        /// <param name="sortDic">字典存放多个排序字段，Key = 默认True为降序,False升序</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetQuery(int top, ISpecification<AdminUser> specification, Dictionary<Func<AdminUser, object>,bool> sortDic)
        {
            return GetQuery(top, specification.Predicate, sortDic);
        }

        #endregion

        #region ==========分页查询数据

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="predicate">Linq表达式[条件查询]</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetPaged(Expression<Func<AdminUser, bool>> predicate, int pageIndex, int pageSize)
        {
            return GetPaged(predicate, pageIndex, pageSize, null);
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="predicate">Linq表达式[条件查询]</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <param name="sortBy">Linq表达式[排序字段]</param>
        /// <param name="desc">默认True为降序,False升序</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetPaged(Expression<Func<AdminUser, bool>> predicate, int pageIndex, int pageSize, Func<AdminUser, object> sortBy, bool desc = true)
        {
            List<AdminUser> list = null;
            int totalCount = 0;
            if (predicate != null)
            {
                try
                {
                    using (BaseEntityDbContext<AdminUser> db = new BaseEntityDbContext<AdminUser>())
                    {
                        IQueryable<AdminUser> query = db.BaseDbSet.Where(predicate);//默认排序
                        if (sortBy != null)//执行排序
                        {
                            if (desc)
                            {
                                list = query.OrderByDescending(sortBy).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                            }
                            else
                            {
                                list = query.OrderBy(sortBy).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                            }
                        }
                        else//系统默认排序
                        {
                            list = query.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                        }
                        totalCount = query.Count();
                    }
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return list;
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="predicate">Linq表达式[条件查询]</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <param name="totalCount">Out 返回数据总条数</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetPaged(Expression<Func<AdminUser, bool>> predicate, int pageIndex, int pageSize, out int totalCount)
        {
            return GetPaged(predicate, pageIndex, pageSize, out totalCount, null);
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="predicate">Linq表达式[条件查询]</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <param name="totalCount">Out 返回数据总条数</param>
        /// <param name="sortBy">Linq表达式[排序字段]</param>
        /// <param name="desc">默认True为降序,False升序</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetPaged(Expression<Func<AdminUser, bool>> predicate, int pageIndex, int pageSize, out int totalCount, Func<AdminUser, object> sortBy, bool desc = true)
        {
            List<AdminUser> list = null;
            totalCount = 0;
            if (predicate != null)
            {
                try
                {
                    using (BaseEntityDbContext<AdminUser> db = new BaseEntityDbContext<AdminUser>())
                    {
                        IQueryable<AdminUser> query = db.BaseDbSet.Where(predicate);//默认排序
                        if (sortBy != null)//执行排序
                        {
                            if (desc)
                            {
                                list = query.OrderByDescending(sortBy).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                            }
                            else
                            {
                                list = query.OrderBy(sortBy).Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                            }
                        }
                        else//系统默认排序
                        {
                            list = query.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                        }
                        totalCount = query.Count();
                    }
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return list;
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="specification">满足Linq表达式规范的组合</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetPaged(ISpecification<AdminUser> specification, int pageIndex, int pageSize)
        {
            return GetPaged(specification.Predicate, pageIndex, pageSize, null);
        }
        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="specification">满足Linq表达式规范的组合</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <param name="sortBy">Linq表达式[排序字段]</param>
        /// <param name="desc">默认True为降序,False升序</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetPaged(ISpecification<AdminUser> specification, int pageIndex, int pageSize, Func<AdminUser, object> sortBy, bool desc = true)
        {
            return GetPaged(specification.Predicate, pageIndex, pageSize, sortBy, desc);
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="specification">满足Linq表达式规范的组合</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <param name="totalCount">Out 返回数据总条数</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetPaged(ISpecification<AdminUser> specification, int pageIndex, int pageSize, out int totalCount)
        {
            return GetPaged(specification.Predicate, pageIndex, pageSize, out totalCount, null);
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="specification">满足Linq表达式规范的组合</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <param name="totalCount">Out 返回数据总条数</param>
        /// <param name="sortBy">Linq表达式[排序字段]</param>
        /// <param name="desc">默认True为降序,False升序</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetPaged(ISpecification<AdminUser> specification, int pageIndex, int pageSize, out int totalCount, Func<AdminUser, object> sortBy, bool desc = true)
        {
            return GetPaged(specification.Predicate, pageIndex, pageSize, out totalCount, sortBy, desc);
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="predicate">Linq表达式[条件查询]</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>db.BaseDbSet
        /// <param name="totalCount">Out 返回数据总条数</param>
        /// <param name="sortDic">字典存放多个排序字段，Key = 默认True为降序,False升序</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetPaged(Expression<Func<AdminUser, bool>> predicate, int pageIndex, int pageSize, out int totalCount, Dictionary<Func<AdminUser, object>,bool> sortDic)
        {
            List<AdminUser> list = null;
            totalCount = 0;
            if (predicate != null)
            {
                try
                {
                    using (BaseEntityDbContext<AdminUser> db = new BaseEntityDbContext<AdminUser>())
                    {
                        IQueryable<AdminUser> query = db.BaseDbSet.Where(predicate);
                        IOrderedEnumerable<AdminUser> queryOrder = null;
                        int num = 0;
                        foreach (KeyValuePair<Func<AdminUser, object>,bool> kvp in sortDic)
                        {
                            if (num == 0)//第一个
                            {
                                if (kvp.Value)//True为降序
                                {
                                    queryOrder = query.OrderByDescending(kvp.Key);
                                }
                                else
                                {
                                    queryOrder = query.OrderBy(kvp.Key);
                                }
                            }
                            else
                            {
                                if (kvp.Value)//True为降序
                                {
                                    queryOrder = queryOrder.ThenByDescending(kvp.Key);
                                }
                                else
                                {
                                    queryOrder = queryOrder.ThenBy(kvp.Key);
                                }
                            }
                            num++;
                        }
                        if (queryOrder != null)
                        {
                            list = queryOrder.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                        }
                        else//系统默认排序
                        {
                            list = query.Skip((pageIndex - 1) * pageSize).Take(pageSize).ToList();
                        }
                        totalCount = query.Count();
                    }
                }
                catch (Exception ex)
                {
                    log.Error("获取失败", ex);
                }
            }
            return list;
        }

        /// <summary>
        /// 获取分页数据,返回泛型实体List集合
        /// </summary>
        /// <param name="specification">满足Linq表达式规范的组合</param>
        /// <param name="pageIndex">当前索引的页面</param>
        /// <param name="pageSize">每一页，页面的行数.</param>
        /// <param name="totalCount">Out 返回数据总条数</param>
        /// <param name="sortDic">字典存放多个排序字段，Key = 默认True为降序,False升序</param>
        /// <returns>AdminUser实体对象的List集合</returns>
        public static List<AdminUser> GetPaged(ISpecification<AdminUser> specification, int pageIndex, int pageSize, out int totalCount, Dictionary<Func<AdminUser, object>,bool> sortDic)
        {
            return GetPaged(specification.Predicate, pageIndex, pageSize, out totalCount, sortDic);
        }

        #endregion

        
	}
}

